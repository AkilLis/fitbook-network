CREATE DEFINER=`root`@`localhost` PROCEDURE `network_calculation`( 
	IN pUserId INT(20), 
    IN pBlockId BIGINT(20), 
    IN pParentId int(20),
    IN pAmount decimal(24,6),
    IN pRankId INT(20), 
    OUT isDevide CHAR(1),
    OUT OutUserId INT(20),
    OUT OutBlockId INT(20)
    )
BEGIN	
		DECLARE count_users INT DEFAULT 1;
        DECLARE _groupId INT DEFAULT 1;	
        DECLARE _sortedOrder VARCHAR(4000);
        DECLARE _fCount INT DEFAULT 1;
        DECLARE _mCount INT DEFAULT 1;
        DECLARE _isExist INT DEFAULT 0;
        DECLARE _upperAmount INT(20);
        
        SET @Id_=  CONCAT(NOW() + 0, (FLOOR( 1 + RAND( ) * 10000 )));
        SET @mapId =  CONCAT(NOW() + 1, (FLOOR( 1 + RAND( ) * 10000 )));
        SET @awardId =  CONCAT(NOW() + 2, (FLOOR( 1 + RAND( ) * 10000 )));
        SET @bonusId =  CONCAT(NOW() + 3, (FLOOR( 1 + RAND( ) * 10000 )));
        SET @cashId =  CONCAT(NOW() + 4, (FLOOR( 1 + RAND( ) * 10000 )));
        SET @savingId =  CONCAT(NOW() + 5, (FLOOR( 1 + RAND( ) * 10000 )));
        SET @usageId =  CONCAT(NOW() + 6, (FLOOR( 1 + RAND( ) * 10000 )));
        
	SET SQL_SAFE_UPDATES = 0;
    /* Зэрэглэл олж байна */    
	SELECT groupId, userCount INTO _groupId, count_users FROM block A WHERE A.id = pblockId;

    IF _groupId = 1
	THEN
		BEGIN
			SELECT A.sortedOrder INTO _sortedOrder FROM userblockmap A WHERE A.userId = pParentId 
					AND A.blockId = pBlockId;
			
			SELECT COUNT(1) INTO _isExist FROM userblockmap WHERE sortedOrder LIKE CONCAT(_sortedOrder,'%') AND LENGTH(sortedOrder) = (LENGTH(_sortedOrder) + 2);
			IF _isExist = 0
			THEN
				BEGIN 
					SET _sortedOrder = CONCAT(_sortedOrder, '01');
				END;
			ELSE 
				BEGIN
					SELECT MAX(sortedOrder) + 1 INTO _sortedOrder FROM userblockmap WHERE sortedOrder LIKE CONCAT(_sortedOrder,'%') AND LENGTH(sortedOrder) = (LENGTH(_sortedOrder) + 2);
				END;
			END IF;
			
			INSERT INTO userblockmap VALUES (@Id_, pUserId, pParentId, _sortedOrder, pBlockId, 0, 0 , pRankId, NOW(), NOW(), 8 + count_users);
			/* Данснуудаа нэмнэ. */
			
			INSERT INTO awardaccount VALUES (@awardId, @awardId, 'Шагналын данс', 'Award Account', 0, NOW(), NOW());
			INSERT INTO bonusaccount VALUES (@bonusId, @bonusId, 'Бонус данс', 'Bonus Account', 0, NOW(), NOW());
			INSERT INTO cashaccount VALUES (@cashId, @cashId, 'Бэлэн мөнгөны данс', 'Cash Account',  0, NOW(), NOW());
			INSERT INTO savingaccount VALUES (@savingId, @savingId, 'Хадгаламжын данс', 'Saving Account', 0, NOW(), NOW());
			INSERT INTO usageaccount VALUES (@usageId, @usageId, 'Хэрэглээны данс', 'Usage Account', pAmount, NOW(), NOW());
            
            /*Хэрэглээны зардлын гүйлгээ*/
            INSERT INTO transactions (inUserId, outUserId, invDate, invType, invDescription, inAccountId, outAccountId, inAmt, outAmt, endAmt, created_at, updated_at)
            VALUES (0, pUserId, NOW(), 'Usage', 'Системд бүртгүүлсэн хэрэглээний мөнгө', @usageId, 0, pAmount, pAmount, 0, NOW(), NOW());
            
            INSERT INTO notification (user_id, notification_type, description, is_read, created_at, updated_at)
            VALUES (pUserId, 'normal', 'Маркетингийн системд тавтай морилно уу. Таньд амжилт хүсье.', 'N', NOW(), NOW());
			
			/* тухайн дансны хэрэглэгчтэй уяж өгнө.*/
				INSERT INTO useraccountmap (userId, type, accountId , groupId, created_at, updated_at)
					VALUES (pUserId, 1, @awardId, pRankId, NOW(), NOW());	
				INSERT INTO useraccountmap (userId, type, accountId, groupId , created_at, updated_at)
					VALUES (pUserId, 2, @bonusId, pRankId, NOW(), NOW());
				INSERT INTO useraccountmap (userId, type, accountId, groupId, created_at, updated_at)
					VALUES (pUserId, 3, @cashId, pRankId, NOW(), NOW());
				INSERT INTO useraccountmap (userId, type, accountId, groupId, created_at, updated_at)
					VALUES (pUserId, 4, @savingId, pRankId, NOW(), NOW());
				INSERT INTO useraccountmap (userId, type, accountId, groupId, created_at, updated_at)
					VALUES (pUserId, 5, @usageId, pRankId, NOW(), NOW());
		END;
	ELSE
		BEGIN
			SELECT A.sortedOrder INTO _sortedOrder FROM userblockmap A WHERE A.userId = pUserId LIMIT 1;
			SELECT COUNT(1) INTO _fCount FROM userblockmap A
				INNER JOIN block B ON A.blockId = B.id AND B.groupId = _groupId
				  WHERE A.sortedOrder LIKE 
				CONCAT(_sortedOrder, '%') AND A.parentId = pUserId;
						
			SELECT COUNT(1) INTO _mCount FROM userblockmap A
				INNER JOIN block B ON A.blockId = b.id AND B.groupId = _groupId
				  WHERE A.sortedOrder LIKE 
				CONCAT(_sortedOrder, '%') AND A.parentId <> pUserId;
					
			INSERT INTO userblockmap (userId, parentId, sortedOrder, blockId, fCount, mCount, rankId, created_at, updated_at, viewOrder) 
				VALUES (pUserId, pParentId, _sortedOrder, pBlockId, _fCount, _mCount , pRankId, NOW(), NOW(), 8 + count_users);
		END;
    END IF;
    
	/* блок руу хэрэглэгчээ нэмнэ. */

    SET @sql = 'update fitbook.block SET '; 
	SET @sql  = CONCAT(@sql  , CASE WHEN count_users < 8 
				THEN  CONCAT('B', (count_users + 1))
				END);
	SET @sql  = CONCAT(@sql , CONCAT('=', pUserId));
	SET @sql  = CONCAT(@sql  ,  CONCAT(' WHERE block.id = ' , pBlockId));
    
    PREPARE stmt3 FROM @sql;
	EXECUTE stmt3;
	DEALLOCATE PREPARE stmt3;
    
    /* Блокийн хүний тоог нэмэх */
    UPDATE fitbook.block SET userCount = userCount + 1 
		WHERE isActive = 'Y' AND block.id = pBlockId;
	
    /* Тухайн хэрэглэгчид блок map тай уяах */
    UPDATE userblockmap A
        SET A.fCount = A.fCount + 1, A.mCount = A.mCount + 1 
        WHERE A.userId = pParentId AND A.blockId = pBlockId;
        
    UPDATE userblockmap A
        SET A.fCount = A.fCount + 1
        WHERE A.userId IN (GetParent(pUserId)) AND A.userId <> pParentId AND A.blockId = pBlockId;
    
    /* call Process_block_data(pBlockId); */
    
    /* Хэрвээ блокын сүүлийн хүн бол блок задрах проц дуудна. хуучин блокыг идэвхгүй болгох */
    IF count_users < 8
    THEN
		SET isDevide = 'N';
        
		/* Урашлуулалын мөнгийн нэмэх */
        DROP TEMPORARY TABLE IF EXISTS tmpCalcBonus;
		CREATE TEMPORARY TABLE tmpCalcBonus
        SELECT A.userId, 
		CASE WHEN A.viewOrder = 1 THEN 
			C.isCapAmount
			ELSE (CASE WHEN A.mCount = 0 THEN
						C.zeroAmount
					   WHEN A.mCount = 1 THEN
						C.oneAmount
					   ELSE
						C.twoAmount
					   END)
		END AS amount, _groupId as groupId from userblockmap A 
		INNER JOIN grouprankConfig C ON C.rankId = pRankId AND C.groupId = _groupId
		Where A.blockId = pBlockId AND A.viewOrder < 8;
        
        update tmpCalcBonus A
        inner join useraccountmap B ON A.userId = B.userId
        inner join bonusaccount C ON C.id = B.accountId AND B.groupId = A.groupId
        set C.endAmount = C.endAmount + A.amount * 0.9;
        
        INSERT INTO transactions (inUserId, outUserId, invDate, invType, invDescription, inAccountId, outAccountId, inAmt, outAmt, endAmt, created_at, updated_at)
        SELECT 0, A.userId, NOW(), 'Bonus', 'Блокын урамшуулал', B.accountId, 0, A.amount * 0.9, 0, C.endAmount, NOW(), NOW() 
			FROM tmpCalcBonus A
			INNER JOIN useraccountmap B ON A.userId = B.userId AND A.groupId = B.groupId AND B.type = 2
            INNER JOIN bonusaccount C ON B.accountId = C.id
            WHERE A.amount <> 0;
        
        update tmpCalcBonus A
        inner join useraccountmap B ON A.userId = B.userId
        inner join usageaccount C ON C.id = B.accountId AND B.groupId = A.groupId
        set C.endAmount = C.endAmount + A.amount * 0.1;
        
        INSERT INTO transactions (inUserId, outUserId, invDate, invType, invDescription, inAccountId, outAccountId, inAmt, outAmt, endAmt, created_at, updated_at)
        SELECT 0, A.userId, NOW(), 'Usage', 'Блокын урамшуулал', B.accountId, 0, A.amount * 0.1, 0, C.endAmount, NOW(), NOW() 
			FROM tmpCalcBonus A
			INNER JOIN useraccountmap B ON A.userId = B.userId AND A.groupId = B.groupId AND B.type = 5
            INNER JOIN usageaccount C ON C.id = B.accountId 
            WHERE A.amount <> 0;
        
	END IF;
    IF count_users = 7 
		THEN 
			call fitbook.block_divide(pBlockId, pRankId, _groupId);
            
            UPDATE fitbook.block SET isActive = 'N' WHERE id = pBlockId;
			/* Багийн ахлагчийн бүлэг ахиулна*/
			DROP TEMPORARY TABLE IF EXISTS CTE_block;
			CREATE TEMPORARY TABLE CTE_block
			select a.userId AS userId, _groupId as groupId, A.parentId
				FROM userblockmap A
				WHERE A.blockId = pBlockId AND A.viewOrder = 1;
			
			IF _groupId = 3  
				THEN
					BEGIN
						ALTER TABLE CTE_block ADD starCount int;
						
						UPDATE CTE_block A
							INNER JOIN users B ON A.userId = B.ParentId
							INNER JOIN userblockMap C ON B.userId = C.userId AND B.isManager = 'Y'
							SET A.starCount = COUNT(B.id);
					
						UPDATE users A
							INNER JOIN CTE_block B ON a.id = B.userId
							SET A.isManager = 'Y', A.starCount = B.starCount;
						
						ALTER TABLE CTE_block DROP COLUMN starCount;
						
						ALTER TABLE CTE_block ADD COLUMN savingAccountAmount decimal(24,6);
						
						UPDATE CTE_block A
							INNER JOIN useraccountmap B ON A.groupId = B.groupId AND A.userId = B.userId
							INNER JOIN savingAccount C ON B.AccountId = C.id
							SET A.savingAccountAmount = C.endAmount;
						
						UPDATE bonusAccount A
							INNER JOIN useraccountmap B ON A.id = B.AccountId
							INNER JOIN CTE_block C ON B.groupId = C.groupId AND b.userId = C.userId
							SET A.endAmount = A.endAmount + C.savingAccountAmount;            
						
						ALTER TABLE CTE_block DROP COLUMN savingAccountAmount;
						
						SET isDevide = 'N';
						
						END;            
					ELSE		
						BEGIN
							/* ДЭВШИХ УРАМШУУЛАЛ БОДОЖ ӨГНӨ*/
							SELECT A.upperAmount INTO _upperAmount FROM grouprankConfig A
							WHERE A.rankId = pRankId AND A.groupId = _groupId;
                            
                            UPDATE bonusAccount C
								INNER JOIN useraccountmap B ON B.accountId = C.id
                                INNER JOIN CTE_block D ON D.userId = B.userId
								SET C.endAmount = C.endAmount + 0.9 * _upperAmount
								WHERE B.groupId = pRankId;
                                
							INSERT INTO transactions (inUserId, outUserId, invDate, invType, invDescription, inAccountId, outAccountId, inAmt, outAmt, endAmt, created_at, updated_at)
							SELECT 0, A.userId, NOW(), 'Bonus', 'Дэвших урамшуулал', B.accountId, 0, _upperAmount * 0.9, 0, C.endAmount, NOW(), NOW() 
								FROM CTE_block A
								INNER JOIN useraccountmap B ON A.userId = B.userId AND B.groupId = pRankId AND B.type = 2
                                INNER JOIN bonusaccount C ON C.id = B.accountId;
								
							UPDATE usageAccount C
								INNER JOIN useraccountmap B ON B.accountId = C.id
                                INNER JOIN CTE_block D ON D.userId = B.userId
								SET C.endAmount = C.endAmount + 0.1 * _upperAmount
								WHERE B.groupId = pRankId;
                                
							INSERT INTO transactions (inUserId, outUserId, invDate, invType, invDescription, inAccountId, outAccountId, inAmt, outAmt, endAmt, created_at, updated_at)
							SELECT 0, A.userId, NOW(), 'Usage', 'Дэвших урамшуулал', B.accountId, 0, _upperAmount * 0.1, 0, C.endAmount, NOW(), NOW() 
								FROM CTE_block A
								INNER JOIN useraccountmap B ON A.userId = B.userId AND B.groupId = pRankId AND B.type = 5
                                INNER JOIN usageaccount C ON C.id = B.accountId;
                            
                            INSERT INTO notification (user_id, notification_type, description, is_read, created_at, updated_at)
                            SELECT A.userId, 'upper', CONCAT('Баяр хүргэе.',(A.groupId + 1),'-р шатанд орлоо.'), 'N', NOW(), NOW() 
								FROM CTE_block A;
                            
                            /* Дууасж байна */
							
                            UPDATE CTE_block SET groupId = groupId + 1;
							ALTER TABLE CTE_block ADD blockId Int(20);
							
							IF EXISTS (SELECT A.* FROM block A
								INNER JOIN CTE_block B ON A.groupId = B.groupId AND A.isActive = 'Y'
								INNER JOIN userblockmap C ON B.parentid = C.userId AND A.id = C.blockId LIMIT 1)
								THEN
									BEGIN                            
										UPDATE CTE_block A
											INNER JOIN block B ON A.groupId = B.groupId AND B.isActive = 'Y'
											INNER JOIN userblockmap C ON A.parentid = C.userId
													AND B.id = C.blockId
											SET A.blockId = B.Id;
										SELECT blockId INTO OutBlockId FROM CTE_block;
										ALTER TABLE CTE_block DROP COLUMN blockId;
									END;
								ELSE 
									BEGIN
										SELECT B.Id INTO OutBlockId FROM CTE_block A
											INNER JOIN block B ON A.groupId = B.groupId AND B.isActive = 'Y'
											ORDER BY userCount DESC
											LIMIT 1;
									END;
							END IF;
							
							SET isDevide = 'Y';
							SELECT userId INTO OutUserId FROM CTE_block;
						END;
					END IF;
    END IF;    
END
